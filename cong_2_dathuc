/*###Begin banned keyword - each of the following line if appear in code will raise error. regex supported
###End banned keyword*/

//###INSERT CODE HERE -
#include <iostream>
#include <math.h>
#include <iomanip>
#define MAX 100
using namespace std;

struct DONTHUC
{
    double n1;
    int n2;
};
struct DATHUC
{
    int n;
    DONTHUC *d;
};

DATHUC* Nhap()
{
    DATHUC *a;
    a = new DATHUC;
    cin >> a->n;
    a->d = new DONTHUC[MAX];
    for (int i=0; i<a->n; i++)
    {
        cin >> a->d[i].n1 >> a->d[i].n2;
    }
    return a;
}

void Xuat(DATHUC a)
{
    int l=0, m=0;
    for (int i=0; i<a.n; i++)
    {
        if (a.d[i].n1!=0){
      for (int t=0; t<i; t++)
      {
          if (a.d[t].n1==0) m++;
      }
      break;
        }

    }
    for (int i=0; i<a.n; i++)
    {
        if (a.d[i].n1>0)
        {
           if (a.d[i].n2!=0)
           {
               if (a.d[i].n2!=1)
               {
                   if (a.d[i].n1!=1)
                   {
                           if (m==i)
                        {
                           m+=101;
                           cout <<  a.d[i].n1 << "x^" << a.d[i].n2;
                        }
                        else cout <<"+" << a.d[i].n1 << "x^" << a.d[i].n2;
                   }
                    else
                        {
                           if (m==i)
                            {
                                m+=101;
                                cout << "x^" << a.d[i].n2;
                            }
                            else cout <<"+" << "x^" << a.d[i].n2;
                       }
               }

               else
               {
                   if (a.d[i].n1!=1)
                   {
                       if (m==i)
                       {
                           m+=101;
                           cout <<  a.d[i].n1 << "x";
                       }
                        else cout << "+" <<a.d[i].n1 << "x";
                   }
                   else
                   {
                       if (m==i)
                       {
                           m+=101;
                           cout << "x";
                       }
                       else cout << "+x";
                   }

               }
           }
           else
           {
               if (a.d[i].n1!=1)
                   {
                       if (m==i)
               {
                   m+=101;
                   cout << a.d[i].n1;
               }
               else cout << "+" << a.d[i].n1;
                   }
                else
                {
                    if (m==i)
                    {
                        m+=101;
                        cout << "1";
                    }

                    else cout << "+1";
                }

           }
        }

        else if (a.d[i].n1<0)
        {
            if (a.d[i].n2!=0)
            {
                if (a.d[i].n2!=1)
                {
                    if (a.d[i].n1!=-1)
                    {
                        cout << a.d[i].n1 << "x^" << a.d[i].n2;
                    }
                    else cout << "-x^" << a.d[i].n2;
                }
                else if (a.d[i].n2==1)
                {
                    if (a.d[i].n1!=-1)
                    {
                        cout << a.d[i].n1 << "x";
                    }
                    else cout << "-x";

                }
            }
            else
            {
                if (a.d[i].n1!=-1)
                    {
                        cout << a.d[i].n1;
                    }
                else cout << "-1";
            }

        }
    else l++;
    }
    if (l==a.n) cout << "0";

}
DATHUC Tong2DaThuc(const DATHUC* a, const DATHUC* b) {
    DATHUC c;
    c.n = 0;
    c.d = new DONTHUC[MAX];

    int i = 0, j = 0, k = 0;

    while (i < a->n && j < b->n) {
        if (a->d[i].n2 > b->d[j].n2) {
            c.d[k] = a->d[i];
            i++;
        } else if (a->d[i].n2 < b->d[j].n2) {
            c.d[k] = b->d[j];
            j++;
        } else {
            c.d[k].n1 = a->d[i].n1 + b->d[j].n1;
            c.d[k].n2 = a->d[i].n2;
            i++;
            j++;
        }
        k++;
    }

    while (i < a->n) {
        c.d[k++] = a->d[i++];
    }

    while (j < b->n) {
        c.d[k++] = b->d[j++];
    }

    c.n = k;
    return c;
}

int main() {
    DATHUC *A, *B;
    A = Nhap();
    B = Nhap();
    cout << "Da thuc A: "; Xuat(*A);
    cout << "\nDa thuc B: "; Xuat(*B);
    cout << "\nA+B = "; Xuat(Tong2DaThuc(A, B));
    return 0;
}
